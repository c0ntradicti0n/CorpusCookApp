{"text": "Fullstack Vue.js \nFullstack Vue \nThe Complete Guide to Vue.js and Friends   Written by Hassan Djirdeh, Nate Murray, and Ari Lerner  \u00a9 2018 Fullstack.io  All rights reserved. No portion of the book manuscript may be reproduced, stored in a retrieval \nsystem, or transmitted in any form or by any means beyond the number of purchased copies, \nexcept for a single backup or archival copy. The code may be used freely in your projects, \ncommercial or otherwise.  The authors and publisher have taken care in preparation of this book, but make no expressed \nor implied warranty of any kind and assume no responsibility for errors or omissions. No \nliability is assumed for incidental or consequential damagers in connection with or arising out \nof the use of the information or programs container herein.  Published in San Francisco, California by Fullstack.io.    Contents Book Revision Bug Reports If you\u2019d like to report any bugs, typos, or suggestions just email us at: vue@fullstack.io. For further help dealing with issues, refer to \u201cHow to Get the Most Out of This Book\u201d. Be notified of updates via Twitter If you\u2019d like to be notified of updates to the book on Twitter, follow us at @fullstackio1. We\u2019d love to hear from you! Did you like the book? Did you find it helpful? We\u2019d love to add your face to our list of testimonials\non the website! Email us at: vue@fullstack.io. 1https://twitter.com/fullstackio https://twitter.com/fullstackio\nhttps://twitter.com/fullstackio \nForeword\nFront-end web development has become astoundingly complex. If you\u2019ve never used a modern\nJavaScript framework, building your first app that just displays \u201cHello\u201d can take a whole week!\nThat might sound ridiculous, but most frameworks assume knowledge of the terminal, advanced\nJavaScript, and tools such as the Node Package Manager (NPM), Babel, Webpack, and sometimes\nmore. Chris Fritz - Vue Core Team Vue, refreshingly, doesn\u2019t assume. We call it the \u201cpro-\ngressive\u201d JavaScript framework because it scales down\nas well as it scales up. If your app is simple, you can\nuse Vue just like jQuery - by dropping in a <script>\ntag. But as your skills and needs grow more advanced,\nVue grows with you to make you more powerful and\nproductive. Hassan provides a catalyst for that growth in this\nbook. Through project-driven learning, he\u2019ll guide you\nfrom the simplest examples through the necessary skills\nfor large-scale, enterprise applications. Along the way,\nyou\u2019ll learn not only how to solve a variety of problems\nwith Vue, but also the concepts and tools that have be-\ncome industry standards \u2013 no matter what framework\nyou use. Welcome to the community, have fun, and enjoy the Vue! \u2013 Chris Fritz, @chrisvfritz2, Vue Core Team 2https://twitter.com/chrisvfritz https://twitter.com/chrisvfritz\nhttps://twitter.com/chrisvfritz \nHow to Get the Most Out of This Book\nOverview This book aims to be the single most useful resource on learning Vue.js. By the time you\u2019re done\nreading this book, you (and your team) will have everything you need to build reliable, powerful\nVue applications. Vue is built on the premise of simplicity by being designed from the ground up to be incrementally\nadoptable. After the first few chapters, you\u2019ll have a solid understanding of Vue\u2019s fundamentals and\nwill be able to build a wide array of rich, interactive web apps with the framework. But beyond Vue\u2019s core, there are tools and libraries that exist in the Vue ecosystem that\u2019s often\nneeded to build real-world production scale applications. Things like client-side routing between\npages, managing complex state, and heavy API interaction at scale. This book can be broken down into two parts. In Part I, we cover all the fundamentals with a progressive, example-driven approach. You\u2019ll first\nintroduce Vue through a Content Delivery Network (CDN) before moving towards building\nwithin Webpack bundled applications. You\u2019ll gain a grasp of handling user interaction, working\nwith single-file components, understanding simple state management, and how custom events\nwork. We bookend the first part by introducing Vuex and how Vuex is integrated to manage overall\napplication data architecture. Part II of this book moves into more advanced concepts that you\u2019ll often see used in large,\nproduction applications. We\u2019ll integrate Vuex to a server-persisted app,manage rich forms, build\na multi-page app that uses client-side routing, and finally explore how unit tests can be written\nwith Vue\u2019s official unit testing library. First, know that you do not need to read this book linearly from cover-to-cover. However, we\u2019ve\nordered the contents of the book in a way we feel fits the order you should learn the concepts. Some\nsections in Part II assume you\u2019ve acquired certain fundamental concepts from Part I. As a result, we\nencourage you to learn all the concepts in Part I of the book first before diving into concepts in Part\nII. Second, keep in mind this package is more than just a book - it\u2019s a course complete with example\ncode for every chapter. Below, we\u2019ll tell you: \u2022 how to approach the code examples and\n\u2022 how to get help if something goes wrong How to Get the Most Out of This Book 2 Vue 2.x In Sept. 20163, the Vue framework was rewritten and released as version 2.0. Vue 2.0 introduced\nnew concepts such as the Virual DOM, render functions, and server-side rendering capabilities. In\naddition, version 2.0 was rewritten to provide significant performance improvements over v1. This book covers, and will always cover, the latest release of Vue - which is currently labelled as\nversion 2.x. Running Code Examples This book comes with a library of runnable code examples. The code is available to download from\nthe same place where you purchased this book. If you have any trouble finding or downloading the code examples, email us at vue@fullstack.io. Webpack projects For Webpack-bundled projects, we use the program npm4 to run examples. You can install the\napplication dependencies with: npm install And boot apps with one of the following commands: npm run start or npm run serve With every chapter, we\u2019ll reiterate the commands necessary to install application dependancies and\nboot example code. After running npm run start or npm run serve, you will see some output on your screen that will\ntell you what URL to open to view your app. If you\u2019re unfamiliar with npm, we cover how to get it installed in the \u201cSetting Up\u201d section in\nthe second chapter. If you\u2019re ever unclear on how to run a particular sample app, checkout the README.md in that\nproject\u2019s directory. EveryWebpack bundled sample project contains a README.md that will give you\nthe instructions you need to run each app. 3https://medium.com/the-vue-point/vue-2-0-is-here-ef1f26acf4b8\n4https://www.npmjs.com/ \nHow to Get the Most Out of This Book 3 Direct <script> Include For simpler examples, we\u2019ve resorted to directly including the Vue library from a Content Delivery\nNetwork (CDN) to get the app up and running as fast as possible. In this book, applications that introduce Vue from a CDN often consist of a single HTML file\n(index.html) for markup and a single JS file (main.js) for all Vue code. With these examples, we\u2019ll\nbe able to run the app by opening the index.html file in our browser (e.g. right click index.html file\nand select Open With > Google Chrome). Since the Vue library is hosted externally in these cases,\nthese examples will require your machine to be connected to the internet. Code Blocks and Context The majority of code blocks in this book is pulled from a runnable code example which you can\nfind in the sample code. For example, here is a code block pulled from the first chapter: upvote/app_5/main.js new Vue({ el: '#app', data: { submissions: Seed.submissions }, computed: { sortedSubmissions () { return this.submissions.sort((a, b) => { return b.votes - a.votes }); } }, components: { 'submission-component': submissionComponent } }); Notice that the header of this code block states the path to the file which contains this code:\nupvote/app_5/main.js. Certain code examples will resemble building blocks to get to a certain point and thus may not\nreflect a code block directly from the sample code. If you ever feel like you\u2019re missing the context\nfor a code example, open up the full code file using your favorite text editor. This book is written\nwith the expectation that you\u2019ll also be looking at the example code alongside the manuscript. For example, we often need to import libraries to get our code to run. In the early chapters of the\nbook we show these import statements, because it\u2019s not clear where the libraries are coming from How to Get the Most Out of This Book 4 otherwise. However, the later chapters of the book aremore advanced and they focus on key concepts\ninstead of repeating boilerplate code that was covered earlier in the book. If at any point you\u2019re\nnot clear on the context, open up the code example on disk. Code Block Numbering In this book, we mostly build larger examples in steps. If you see a file being loaded that has a\nnumeric suffix, that generally means we\u2019re building up to something bigger. For instance, the code block above has the file path: upvote/app_5/main.js. When you see the -N.js\nsyntax, that means we\u2019re building up to a final version of the file. You can jump into that file and\nsee the state of all the code at that particular stage. Instruction for Windows users All the code in this book has been tested on a Windows machine. If you have any issues\nrunning the code on Windows, send us an email5 and we\u2019ll try to help you get it resolved. Ensure Node.js and npm are installed If you\u2019re on a Windows machine and have yet to do any web development on it, you can install\nthe Node.js Windows Installer from the Node.js6 website. With Node.js (and npm) appropriately\ninstalled, you should be able to start the Webpack-bundled Node.js projects in the book as expected. See this tutorial7 for installing Node.js and npm on Windows. Getting Help While we\u2019ve made every effort to be clear, precise, and accurate you may find that when you\u2019re\nwriting your code you run into a problem. Generally, there are three types of problems: \u2022 A \u201cbug\u201d in the book (e.g. how we describe something is wrong)\n\u2022 A \u201cbug\u201d in our code\n\u2022 A \u201cbug\u201d in your code\n5vue@fullstack.io\n6http://nodejs.org\n7http://blog.teamtreehouse.com/install-node-js-npm-windows \nHow to Get the Most Out of This Book 5 If you find an inaccuracy in how we describe something, or you feel a concept isn\u2019t clear, email us!\nWe want to make sure that the book is both accurate and clear. Similarly, if you\u2019ve found a bug in our code we definitely want to hear about it. If you\u2019re having trouble getting your own app working (and it isn\u2019t our example code), this case is\na bit harder for us to handle. If you\u2019re still stuck, we\u2019d still love to hear from you. Emailing Us If you\u2019re emailing us asking for technical help, here\u2019s what we\u2019d like to know: \u2022 What revision of the book are you referring to?\n\u2022 What operating system are you on? (e.g. Mac OS X 10.13.2, Windows 95)\n\u2022 Which chapter and which example project are you on?\n\u2022 What were you trying to accomplish?\n\u2022 What have you tried already?\n\u2022 What output did you expect?\n\u2022 What actually happened? (Including relevant log output.) The absolute best way to get technical support is to send us a short, self-contained example of the\nproblem. Our preferred way to receive this would be for you to send us a Plunkr link by using this\nURL8 as a template. That URL contains a runnable, boilerplate Vue app. If you can copy and paste your code into that\nproject, reproduce your error, and send it to us you\u2019ll greatly increase the likelihood of a prompt,\nhelpful response. When you\u2019ve written down these things, email us at vue@fullstack.io. We look forward to hearing\nfrom you. Get excited! Writing web apps with Vue is fun. And by using this book, you\u2019re going to learn how to build\nreal Vue apps fast. (Much faster than spending hours parsing out-dated blog posts.) If you\u2019ve written client-side JavaScript before or used existing JavaScript frameworks, you\u2019ll find\nVue refreshingly intuitive. If this is your first serious foray into the front-end, you\u2019ll be blown away\nat how quickly you can create something worth sharing. So hold on tight - you\u2019re about to become really proficient with Vue, and have a lot of fun along the\nway. Let\u2019s dig in! \u2022 Hassan (@djirdehh9), Nate, and Ari 8http://bit.ly/2orvQcd\n9https://twitter.com/djirdehh http://bit.ly/2orvQcd\nhttps://twitter.com/djirdehh\nhttp://bit.ly/2orvQcd\nhttps://twitter.com/djirdehh \nI - Your first Vue.js Web Application\nBuilding UpVote! On our first step to learning Vue, we\u2019re going to build a simple voting application (named UpVote!)\nthat takes inspiration from popular social feed websites like Reddit10 and Hacker News11. Completed version of the app UpVote! focuses on displaying a list of submissions that users can vote on. Each submission will\npresent some information about itself like an image, title, and description. All submissions are sorted\ninstantaneously by number of votes. The up-vote icon in each submissionwill allow users to increase\nvote numbers and subsequently rearrange submission layout. With UpVote!, we\u2019ll become familiar with how Vue approaches front-end development by under-\nstanding the basic fundamentals associated with the library. By the end of the chapter we\u2019ll be well\non our way to building dynamic front-end interfaces thanks to Vue\u2019s simplicity! 10https://reddit.com\n11https://hackernews.com https://reddit.com/\nhttps://hackernews.com/\nhttps://reddit.com/\nhttps://hackernews.com/ \nI - Your first Vue.js Web Application 7 Development environment setup Code editor Regardless of experience, whenever developing for the web, we\u2019ll need a code editor to write our\napplication (this is true for all code in this book). It\u2019s most important to be comfortable with your\ncode editor, so if you have one you like, stick with it. If not, we recommend Atom12, Sublime Text\n313, or Visual Studio Code14. Development Environment For this chapter, we\u2019ll focus on getting our Vue app up and running as fast as possible, so we\u2019ll simply\nintroduce Vue through a Content Delivery Network (CDN). We\u2019ll take a deeper look into installing\nall the necessary libraries for our development environment in the next chapter. Browser We highly recommend using the Google Chrome Web Browser15 to develop Vue apps since we\u2019ll be\nusing the Chrome developer toolkit16 throughout this book. To follow along with our development\nand debugging, we recommend installing Chrome, if not installed already. With Chrome, Vue provides an incredibly useful extension, Vue.js devtools17 that simplifies\ndebugging of Vue applications. We\u2019ll be using the devtools at separate points throughout the book\nso we encourage you to install it as well. Note: With certain chapters in this book (like this chapter for example), we\u2019ll be working with\napplications opened via file:// protocol. To make the Vue devtools work for these pages, you\u2019ll\nneed to check \u201cAllow access to file URLs\u201d for the extension in Chrome\u2019s extension manager: Allow access to file URLs \nI - Your first Vue.js Web Application 8 JavaScript ES6/ES7 JavaScript is the language of the web. It runs on many different browsers, including Google Chrome,\nFirefox, Safari, Microsoft Edge, and Internet Explorer. Different browsers have different JavaScript\ninterpreters which execute JavaScript code. Its widespread adoption as the Internet\u2019s client-side scripting language led to the formation of a\nstandards body which manages its specification. The specification is called ECMAScript or ES. The 5th edition of the specification is called ES5. We think of ES5 as a \u201cversion\u201d of the JavaScript\nprogramming language. Finalized in 2009, ES5 was adopted by all major browsers within a few\nyears. The 6th edition of JavaScript is referred to as ES6. Finalized in 2015, the latest versions of major\nbrowsers are still finishing adding support for ES6 as of 2017. ES6 provides a significant update. It\ncontains a whole host of new features for JavaScript, almost two dozen in total. JavaScript written\nin ES6 is tangibly different than JavaScript written in ES5. ES7, a much smaller update that builds on ES6, was ratified in June 2016. ES7 contains only two new\nfeatures. To take advantage of the future versions of JavaScript, we want to write our code in ES6/ES7 today.\nWe\u2019ll also want our JavaScript to run on older browsers until they fade out of widespread use. This book is written using the JavaScript ES7 version. As ES6 ratified a majority of these new\nfeatures, we\u2019ll commonly refer to these new features as ES6 features. ES6 is sometimes referred to as ES2015, the year of its finalization. ES7, in turn, is often\nreferred to as ES2016. Getting started Sample Code All the code examples/snippets contained in this chapter (and all the other chapters) are available\nin the code package that came with the book. In the code package we\u2019ll see completed versions of\nthe apps as well as boilerplates to help us get started. Each chapter provides detailed instruction on\nhow to follow along on our own. While coding along with the book is not necessary, we highly recommend doing so. Playing around\nwith examples and sample code will help solidify and strengthen understanding of new concepts. I - Your first Vue.js Web Application 9 Previewing the application We\u2019ll begin this chapter by taking a look at a working implementation of the UpVote! app. Let\u2019s open up the sample code that came with the book and locate the upvote/ folder with our\nmachines file navigator (Finder for OS X or Windows Explorer on Windows) or through our code\neditor (e.g. Sublime). By opening the upvote/ folder, we\u2019ll see all the sub-directories containedwithin\nthe sample app: upvote app/ app_1/ app_2/ app_3/ app_4/ app_5/ app_complete/ public/ We\u2019ve included each version of the app as we build it up throughout this chapter (app_1/, app_2/,\netc). Each code block in this chapter references which app version it is contained within. We can\ncopy and paste longer code insertions from these app versions into our local app/ folder, the starting\npoint of our application. The public/ sub-folder hosts all the images and custom styles we\u2019ll use within our application. app_complete represents the completed state of our application. Opening the app_complete folder,\nwe\u2019ll see there are just three files located inside: app_complete index.html main.js seed.js We can see the running application by right clicking on the index.html file and selecting Open With\n> Google Chrome. I - Your first Vue.js Web Application 10 Completed version of the app Notice how the submissions are all sorted from highest to lowest number of votes. The application\nwill keep the posts sorted by number of votes, moving them around as the votes change without\nreloading the page. Prepare the app Let\u2019s begin building the application. We\u2019re going to be working entirely from the app/ directory.\nBy opening the files within app/ in a text editor, we\u2019ll see some boilerplate code contained in the\nindex.html and seed.js files, while main.js is left blank. Let\u2019s begin by looking inside the index.html file: I - Your first Vue.js Web Application 11 upvote/app/index.html <html> <head> <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/bulma/0.5.3/css/bulma.css\"> <link rel=\"stylesheet\" href=\"https://use.fontawesome.com/releases/v5.0.6/css/all.css\"> <link rel=\"stylesheet\" href=\"../public/styles.css\" /> </head> <body> <div id=\"app\"> <h2 class=\"title has-text-centered dividing-header\">UpVote!</h2> </div> <script src=\"https://unpkg.com/vue\"></script> <script src=\"./seed.js\"></script> <script src=\"./main.js\"></script> </body> </html> In our <head> tag, there are three stylesheet dependancies we\u2019ve included in our application: upvote/app/index.html <head> <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/bulma/0.5.3/css/bulma.css\"> <link rel=\"stylesheet\" href=\"https://use.fontawesome.com/releases/v5.0.6/css/all.css\"> <link rel=\"stylesheet\" href=\"../public/styles.css\" /> </head> We\u2019ve introduced Bulma18 as our applications CSS framework, Font Awesome19 for icons, and our\nown styles.css file that lives in our public folder. 18http://bulma.io/\n19http://fontawesome.io/ http://bulma.io/\nhttp://fontawesome.io/\nhttp://bulma.io/\nhttp://fontawesome.io/ \nI - Your first Vue.js Web Application 12 For this project, we\u2019re using Bulma20 for styling. Bulma is a CSS framework, much like Twitter\u2019s popular Bootstrap21 framework. It provides\nus with a grid system and some simple styling. We don\u2019t need to know Bulma in-depth in\norder to go through this chapter (or this book). We\u2019ll always provide all the styling code that is needed. At some point, it\u2019s a good idea to\ncheck out the Bulma docs22 to get familiar with the framework and explore how to use it in\nother projects we\u2019ll build in the future. The heart of our application lives in the few lines within our <body> tag which currently looks like\nthis: upvote/app/index.html <div id=\"app\"> <h2 class=\"title has-text-centered dividing-header\">UpVote!</h2> </div> The class attributes refer to CSS styles and are safe to ignore in the context of our application. Not\npaying attention to those, we can see we have a title for the page (h2) and a <div> element with an\nid of app. The <div> element with the id of app is where our Vue application will be loaded and attached onto\nthe template. In other words, our Vue application will bemounted on to this particular element. The next few lines tells the browser which JavaScript files to load: upvote/app/index.html <script src=\"https://unpkg.com/vue\"></script> <script src=\"./seed.js\"></script> <script src=\"./main.js\"></script> The first <script> tag loads the latest version of Vue from a Content Delivery Network (CDN) at\nunpkg23. Using the CDN to load the Vue dependency is the simplest and quickest way to introduce\nVue to an application. A Content Delivery Network (CDN) is a system of services that deliver content to users\nbased on their geographical location and the content delivery server. Using CDN\u2019s have the\nbenefit of decreasing server load and providing faster loading times to users who\u2019ve already\ndownloaded the content. Most CDNs are used to deliver static content like common JavaScript libraries, fonts, CSS\nfiles, etc. We\u2019ve also introduced Bulma and Font Awesome through CDNs in our <head> tag. 20http://bulma.io/\n21http://getbootstrap.com/\n22http://bulma.io/documentation/overview/start/\n23https://unpkg.com \nI - Your first Vue.js Web Application 13 The other two <script> tags reference the internal JavaScript files we\u2019ll write in the ./seed.js and\n./main.js files. Setting up the view Now that we have a good understanding of our boilerplate code, we can start diving in and writing\nsome code. Let\u2019s first set up a template for how a single submission would look like. We\u2019ll adapt\nBulma\u2019s media object24 as it represents a good starting point. In our index.html we\u2019ll insert the following template block right below our h2 title: upvote/app_1/index.html <div class=\"section\"> <article class=\"media\"> <figure class=\"media-left\"> <img class=\"image is-64x64\" src=\"../public/images/submissions/image-yellow.png\"> </figure> <div class=\"media-content\"> <div class=\"content\"> <p> <strong> <a href=\"#\" class=\"has-text-info\">Yellow Pail</a> <span class=\"tag is-small\">#4</span> </strong> <br> On-demand sand castle construction expertise. <br> <small class=\"is-size-7\"> Submitted by: <img class=\"image is-24x24\" src=\"../public/images/avatars/daniel.jpg\"> </small> </p> </div> </div> <div class=\"media-right\"> <span class=\"icon is-small\"> <i class=\"fa fa-chevron-up\"></i> <strong class=\"has-text-info\">10</strong> </span> 24http://bulma.io/documentation/layout/media-object/ http://bulma.io/documentation/layout/media-object/\nhttp://bulma.io/documentation/layout/media-object/ \nI - Your first Vue.js Web Application 14 </div> </article> </div> This template is a slight modification of Bulma\u2019s media object25. We\u2019ve added an encompassing <div> element over an <article> template block. The <article>\ntemplate block is the view for a single submission and has three child DOM elements: \u2022 <figure> with media-left class which will display the main image of the submission and is\npositioned to the left. \u2022 <div> with media-content class which displays the additional details of the submission such\nas the title, id, description, and avatar of the submitted user. \u2022 <div> with media-right class which shows a fa-chevron-up icon alongside the submission\u2019s\nnumber of votes. If we open our app/index.html in our Chrome Browser (right click and select Open With > Google\nChrome), we will see our newly built submission. A single submission 25http://bulma.io/documentation/layout/media-object/ http://bulma.io/documentation/layout/media-object/\nhttp://bulma.io/documentation/layout/media-object/ \nI - Your first Vue.js Web Application 15 Awesome. We won\u2019t write much more HTML markup than what we\u2019ve just added. While neat, at the moment our view is static. We\u2019ve simply hard-coded the title, description and\nother details. To use this template in a meanigful way, we\u2019ll want to change it to be reactive (i.e.\ndynamically data-driven). Making the view data-driven Driving the template with data will allow us to dynamically render the view based upon the data\nthat we give it. Let\u2019s familiarize ourselves with the applications data model. The data model Within our app directory, we\u2019ve included a file called seed.js. seed.js contains sample data for a\nlist of submissions (it seeds our application with data). The seed.js file contains a JavaScript object\ncalled Seed.submissions. Seed.submissions is an array of JavaScript objects where each represents\na sample submission object: const submissions = [ { id: 1, title: 'Yellow Pail', description: 'On-demand sand castle construction expertise.', url: '#', votes: 16, avatar: '../public/images/avatars/daniel.jpg', submissionImage: '../public/images/submissions/image-yellow.png', }, ] Each submission has a unique id and a series of properties including title, description, votes, etc. Since we only have a single submission displayed in our view, we\u2019ll first focus on getting the data\nfrom a single submission object (i.e. submissions[0]) on to the template. The Vue Instance The Vue instance is the starting point of all Vue applications. A Vue instance accepts an options\nobject which can contain details of the instance such as its template, data, methods, etc. Root level\nVue instances allow us to reference the DOM with which the instance is to be mounted/attached to. Let\u2019s see an example of this by setting up the Vue instance for our application. We\u2019ll write all our\nVue code for the rest of this chapter inside the main.js file. Let\u2019s open main.js and create the Vue\ninstance using the Vue function: I - Your first Vue.js Web Application 16 new Vue({ el: '#app' }); We\u2019ve just specified the HTML element with the id of app to be the mounting point of our Vue\napplication, by using the el option and providing it a string value of #app. Anywhere within this\nelement can Vue JavaScript code now be used. The Vue instance can also return data that needs to be handled within the view. This data must be\nspecified within a data object in the instance. This is how we\u2019ll arrange the connection between the\ndata in our seed.js file and the template view. Let\u2019s update the instance by specifying a new data object. In the object, we\u2019ll include a submissions\nkey that will have the same value as the Seed.submissions array: upvote/app_2/main.js new Vue({ el: '#app', data: { submissions: Seed.submissions } }); In the HTML template, we can now reference all submission data by accessing submissions. The Vue object constructor is available on the global scope since we\u2019ve included the\n<script /> tag, that loads Vue, in our index.html file. Without including this tag, the Vue\nfunction won\u2019t be available and we\u2019ll be presented with a console error stating Uncaught\nReferenceError: Vue is not defined. With our Vue instance created and containing submission data, we can now work towards\nsynchronizing data in the model to the view. In other words, we can now data bind the instance\u2019s\ndata to the DOM. Data binding The simplest form of data binding in Vue is using the \u2018Mustache\u2019 syntax which is denoted by double\ncurly braces {{}}. We\u2019ll apply this syntax to bind all the text within our HTML (e.g. title, description,\netc.). The \u2018Mustache\u2019 syntax however cannot be used in HTML attributes like href, id, src etc. Vue\nprovides the native v-bind attribute (this is known as a Vue directive) to bind HTML attributes.\nWe\u2019ll use this directive to update the src attributes in our template. I - Your first Vue.js Web Application 17 The Vue syntax may take some brief time to get used to, both within template manipulation\nas well as on the JavaScript side. We\u2019ll gain familiarity on syntax/semantics as we continue to write code within this book. Let\u2019s swap the hard-coded data in the template to now reference the content in the first object in\nthe submissions array, submissions[0]. This will make the newly added template block now look\nlike this: upvote/app_2/index.html\n<div class=\"section\"> <article class=\"media\"> <figure class=\"media-left\"> <img class=\"image is-64x64\" v-bind:src=\"submissions[0].submissionImage\"> </figure> <div class=\"media-content\"> <div class=\"content\"> <p> <strong> <a v-bind:href=\"submissions[0].url\" class=\"has-text-info\"> {{ submissions[0].title }} </a> <span class=\"tag is-small\">#{{ submissions[0].id }}</span> </strong> <br> {{ submissions[0].description }} <br> <small class=\"is-size-7\"> Submitted by: <img class=\"image is-24x24\" v-bind:src=\"submissions[0].avatar\"> </small> </p> </div> </div> <div class=\"media-right\"> <span class=\"icon is-small\"> <i class=\"fa fa-chevron-up\"></i> <strong class=\"has-text-info\">{{ submissions[0].votes }}</strong> </span> </div> </article> </div> I - Your first Vue.js Web Application 18 If we\u2019ve bound everything appropriately, we should see no change in our view (since the hard-coded\ninformation was the same content in our submissions[0] object). Let\u2019s refresh our browser and see our template be rendered again. Submission with bound data List rendering We\u2019ve successfully created our Vue instance and bound a single submission object in our view. Our\nnext objective is to render all the submission objects to our view by displaying each submission\nobject as a separate template block. Since we\u2019re going to be rendering a list of submission objects, we\u2019re going to use Vue\u2019s native v-for\ndirective. v-for directive The v-for directive is used to render a list of items based on a data source. In our case, we would\nlike to render a submission post for each of the submission objects in our Seeds.submission array. I - Your first Vue.js Web Application 19 The <article> element in the index.html file, which is a standard HTML element, currently displays\na single submission post: <article class=\"media\"> <!-- Rest of the submission template --> </article> The v-for directive requires a specific syntax along the lines of item in items, where items is a\ndata collection and item is an alias for every element that is being iterated upon: In our template, since submissions is the data collection we\u2019ll be iterating over; submission would\nbe an appropriate alias to use. We\u2019ll add the v-for statement to the <article> block like this: <article v-for=\"submission in submissions\" class=\"media\"> <!-- Rest of the submission template --> </article> key It\u2019s common practice to specify a key attribute for every iterated element within a rendered v-for\nlist. Vue uses the key attribute to create unique bindings for each node\u2019s identity. To specify this uniqueness to each item in the list, we\u2019ll assign a key to every iterated submission.\nWe\u2019ll use the id of a submission since a submission\u2019s id would never be equal to that of another\nsubmission. Because we\u2019re using dynamic values, we\u2019ll need to use v-bind to bind our key to the\nsubmission.id: I - Your first Vue.js Web Application 20 <article v-for=\"submission in submissions\" v-bind:key=\"submission.id\" class=\"media\"> <!-- Rest of the submission template --> </article> If there were any dynamic changes made to a v-for list without the key attribute, Vue will opt\ntowards changing data within each element instead of moving the DOM elements accordingly. By\nspecifying a unique key attribute to each iterated item, we\u2019re now telling Vue to reorder elements if\nneeded. The Vue docs26 explains the importance of the key attribute in more detail. In our template, let\u2019s now change the submissions[0] references and update it to use the iterated\narray instance variable submission: upvote/app_3/index.html <div class=\"section\"> <article v-for=\"submission in submissions\" v-bind:key=\"submission.id\" class=\"media\"> <figure class=\"media-left\"> <img class=\"image is-64x64\" v-bind:src=\"submission.submissionImage\"> </figure> <div class=\"media-content\"> <div class=\"content\"> <p> <strong> <a v-bind:href=\"submission.url\" class=\"has-text-info\"> {{ submission.title }} </a> <span class=\"tag is-small\">#{{ submission.id }}</span> </strong> <br> {{ submission.description }} <br> <small class=\"is-size-7\"> Submitted by: <img class=\"image is-24x24\" v-bind:src=\"submission.avatar\"> </small> 26https://vuejs.org/v2/guide/list.html#key https://vuejs.org/v2/guide/list.html#key\nhttps://vuejs.org/v2/guide/list.html#key \nI - Your first Vue.js Web Application 21 </p> </div> </div> <div class=\"media-right\"> <span class=\"icon is-small\"> <i class=\"fa fa-chevron-up\"></i> <strong class=\"has-text-info\">{{ submission.votes }}</strong> </span> </div> </article> </div> Refreshing our browser, we should now expect to see a list of submissions. This is due to the v-for\ndirective now dynamically creating a submission <article> element for each submission in the seed\nfile. List of submissions I - Your first Vue.js Web Application 22 Sorting In traditional social feeds (like Reddit27 and Hacker News28), we often see number of votes as the\nmeasuring stick that controls the position of different submission posts. Submissionswith the highest\nnumber of votes appear at the top of the web page with lower voted submissions being positioned\nat the bottom. If we go back to our v-for statement in the template, we see an iteration of submission in\nsubmissions. submissions is the standard data object that is being used in our view, retrieved from\nour data source. Wouldn\u2019t it be great if we can somehow specify an iteration like submission in sortedSubmissions\nwhere sortedSubmissions returns a sorted array of submissions all the time? This is where Vue\u2019s\ncomputed properties come in. Computed properties Computed properties are used to handle complex calculations of information that need to be\ndisplayed in the view. Below the data property in our Vue instance (back in the main.js file), we\u2019ll\nintroduce a computed property sortedSubmissions that returns a sorted array of submissions: new Vue({ el: '#app', data: { submissions: Seed.submissions }, computed: { sortedSubmissions () { return this.submissions.sort((a, b) => { return b.votes - a.votes }); } } }); Within a Vue instance, we\u2019re able to reference the instance\u2019s data object with this. Hence\nthis.submissions refers to the submissions object we\u2019ve specified in our instance\u2019s data. For sorting\nwe\u2019re simply using the native Array object\u2019s sort method29. In our template where we have our v-for expression, we can now replace submissions with\nsortedSubmissions as the array to iterate over. \nI - Your first Vue.js Web Application 23 <article v-for=\"submission in sortedSubmissions\" v-bind:key=\"submission.id\" class=\"media\"> <!-- Rest of the submission template --> </article> Refreshing our browser, we see the same list of submissions but now appropriately sorted by the\nnumber of votes! Sorted list of submissions Event handling (our app\u2019s first interaction) When the up-vote icon on each one of the submissions is clicked, we expect it to increase the votes\nattribute for that submission by one. To handle this interaction, we\u2019ll be using Vue\u2019s native v-on\ndirective. The v-on directive The v-on directive is used to create event listeners within the DOM. I - Your first Vue.js Web Application 24 As all web browsers are event driven, we\u2019ll use these events to trigger interaction in our Vue\napplication. For instance, in native JavaScript (i.e. without Vue), we can attach an event listener\nto a DOM object using the addEventListener() method. const ele = document.getElementById('app'); ele.addEventListener('click', () => console.log('clicked')) In Vue, we can use the v-on:click directive to implement a click handler. We can specify\nthis click handler on an up-vote icon of a submission. We\u2019ll set this click event handler to\ncall an upvote(submission.id) method whenever the up-vote icon is clicked. We\u2019ll pass in the\nsubmission.id as an argument to be used within the method. This updates the div element that\nencompasses the up-vote icon to this: <div class=\"media-right\"> <span class=\"icon is-small\" v-on:click=\"upvote(submission.id)\"> <i class=\"fa fa-chevron-up\"></i> <strong class=\"has-text-info\">{{ submission.votes }}</strong> </span> </div> Since we\u2019ve specifed the click event, we now need to define the upvote(submissionId) method in\nour Vue instance. A methods property exists in a Vue instance to allow us to define methods bound to that instance.\nMethods behave like normal JavaScript functions and are only evaluated when explicitly called.\nBelow the computed property in our instance, let\u2019s introduce the methods property and the upvote\nmethod: new Vue({ el: '#app', data: { submissions: Seed.submissions }, computed: { }, methods: { upvote(submissionId) { const submission = this.submissions.find( submission => submission.id === submissionId ); submission.votes++; } I - Your first Vue.js Web Application 25 } }); The up-voting logic involves using the native JavaScript find() method to locate the submission\nobject with the id equal to the submissionId parameter. The votes attribute of that submission is\nthen incremented by one. Reactive state We need to note an important aspect of Vue here. With a library like React, the above method\nimplementation is problematic since state is often treated as immutable. State within Vue, on the\nother hand, is reactive. Reactive state is one of the key differences that makes Vue unique. State (i.e. data) management is\noften intuitive and easy to understand since modifying state often directly causes the view to update. We\u2019ll be seeing more and more on how Vue data responds reactively throughout the book. For now,\nkeep in mind Vue has an unobtrusive system to how data is modified and the view reacts. Our app is now responsive to user interaction. Let\u2019s save the index.html and main.js files, refresh\nthe browser, and start clicking the up-vote icons. I - Your first Vue.js Web Application 26 As we up-vote a submission, we are directly modifying the this.submissions data array. Our\ncomputed property sortedSubmissions depends on this.submissions, so as the latter changes, so\ndoes the former. Our view is reactive to sortedSubmissions. When changes happen to our computed property, our\nview re-renders to display that change! Class bindings Our application has implemented almost all the functionality we expected from the beginning. Before we dive in and try to improve how our code is laid out, let\u2019s add a conditional class that\ndisplays a special blue border around a submission when said submission reaches a certain number\nof votes (let\u2019s say 20 votes). We have the class blue-border already set up in our custom styles.css file. Our conditional class\nbinding will basically dictate: the presence of the blue-border class depends on the truthiness of\nsubmission.votes >= 20. We\u2019ll use the v-bind directive to dynamically enable the class when the\nsubmission ", "filename": "Hassan_Djirdeh;_Nate_Murray;_Ari.pdf", "meta": {"bla": "huahaua"}}